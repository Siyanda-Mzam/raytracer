Mathematics Library (Matlib) for Computer Graphics
By Siyanda Mzam <simzam@student.42.fr>

This is a young library that was developed for use in the development
of a Ray Tracer (A small engine that generates high quality images.
Matlib is a compact C99 library compatible with OpenGL. It provides basic
3D vector and 4x4 matrix operations as well as functions to create transformation
and projection matrices to carry out stuff like Translation, Scaling and Rotation
in "one go!".

################################################################################################################################################

GOOD TO KNOW THAT:

- If not explicitly stated by a parameter name, all angles are in radians.
- The matrices use column-major indices. This is the same as in OpenGL and GLSL.
  See the matrix documentation below for details.
- Matrices are passed by value. This is probably a bit inefficient but
  simplifies code quite a bit. Most operations will be inlined by the compiler
  anyway so the difference shouldn't matter that much. If testing shows
  significant slowdowns the matrix type might change but ease of use is more
  important than performance in this case.
- When combining matrices with multiplication the effects apply right to left.
  This is the convention used in mathematics and OpenGL.

  Source: https://en.wikipedia.org/wiki/Transformation_matrix#Composing_and_inverting_transformations

- The `m4_mul_pos()` and `m4_mul_dir()` functions do a correct perspective
  divide (division by w) when necessary. This is a bit slower but ensures that
  the functions will properly work with projection matrices. If profiling shows
  this is a bottleneck special functions without perspective division can be
  added. But the normal multiplications should avoid any surprises.
- The library consistently uses a right-handed coordinate system.
- Special care has been taken to document all complex operations and important
  sources. Most code is covered by test cases that have been manually calculated
  and checked on paper.
- Again, in a two-dimensional array the first index is the column index,
  the second the row index. The memory layout of nested arrays in C matches
  the memory layout expected by OpenGL.
- OpenGL expects the first 4 floats to be the first column of the matrix.
  So we need to define the named members column by column for the names to
  match the memory locations of the array elements.
- We also have define PI directly because we would need to define the _BSD_SOURCE or
  _XOPEN_SOURCE feature test macros to get it from math.h. That would be a rather harsh dependency.
  So we define it directly if necessary.

################################################################################################################################################

 POSSIBLE EXTENSIONS

These are ideas for future work on the library. They'll be implemented as soon as
there is a proper use case and we can find good names for them.

- bool v3_is_null(t_vec3 v, float epsilon)
  To check if the length of a vector is smaller than `epsilon`.
- t_vec3 v3_length_default(t_vec3 v, float default_length, float epsilon)
  Returns `default_length` if the length of `v` is smaller than `epsilon`.
  Otherwise same as `v3_length()`.
- t_vec3 v3_norm_default(t_vec3 v, t_vec3 default_vector, float epsilon)
  Returns `default_vector` if the length of `v` is smaller than `epsilon`.
  Otherwise the same as `v3_norm()`.
- t_mat4 m4_invert(t_mat4 matrix)
  Matrix inversion that works with arbitrary matrices. `m4_invert_affine()` can
  already invert translation, rotation, scaling, mirroring, reflection and
  shearing matrices. So a general inversion might only be useful to invert
  projection matrices for picking. But with orthographic and perspective
  projection it's probably simpler to calculate the ray into the scene directly
  based on the screen coordinates.

################################################################################################################################################

4x4 MATRICES

- Use the `mat4()` function to create a matrix.
- You can write the matrix members in the same way as you would write them on paper or on paper:
 
 t_mat4 m = mat4(
     1,  0,  0,  7,
     0,  1,  0,  5,
     0,  0,  1,  3,
     0,  0,  0,  1
	 )
 
- This creates a matrix that translates points by vec3(7, 5, 3).
- All other matrix functions start with the `m4_` prefix.
- Among them functions to create identity, translation, rotation, scaling and projection matrices.
- According to online sources and trusted professionals, most Software enjoy working with
  column-major order matrices, like OpenGL.
- So we have decided to follow on the convention, especially because we will be using it soon, anyway.
- Members can be accessed by indices or member names. When you write a matrix on paper or on the
  whiteboard the indices and named members correspond to these positions:
 
 | m[0][0]  m[1][0]  m[2][0]  m[3][0] |
 | m[0][1]  m[1][1]  m[2][1]  m[3][1] |
 | m[0][2]  m[1][2]  m[2][2]  m[3][2] |
 | m[0][3]  m[1][3]  m[2][3]  m[3][3] |
 
 | m00  m10  m20  m30 |
 | m01  m11  m21  m31 |
 | m02  m12  m22  m32 |
 | m03  m13  m23  m33 |
 
- The first index or number in a name denotes the column, the second the row.
- So m[i][j] denotes the member in the ith column and the jth row.
- This is the same as in GLSL (source: GLSL v1.3 specification, 5.6 Matrix Components).

 3D VECTORS

 - Use the `vec3()` function to create vectors. All other vector functions start with the `v3_` prefix.


 ########################################################******FUNCTIONS******#################################################################

	t_mat4					m4_rotation(float angle_in_rad, t_vec3 axis)

 - Creates a matrix to rotate around an axis by a given angle. The axis doesn't need to be normalized.

 * Sources: 
 * https://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle

================================================================================================================================================

	t_mat4					m4_ortho(float left, float right, float bottom, float top, float back, float front)

 - Creates an orthographic projection matrix. It maps the right handed cube defined by left,
   right, bottom, top, back and front onto the screen and z-buffer.
 - You can think of it as a cube you move through world or camera space and everything inside is visible.
 - These functions require the user to negate the last two arguments as a result (creating a left-handed coordinate system).
 - We have avoided that here so you can think of this function as moving a right-handed cube through world space.
 - The arguments are ordered in a way that for each axis you specify the minimum followed by the maximum.
 - Thats why it's bottom to top and back to front.

 * Implementation details:

 - To be more exact the right-handed cube is mapped into normalized device coordinates,
 - a left-handed cube where (-1 -1) is the lower left corner, (1, 1) the upper right corner and a z-value of -1 is the nearest point and
   1 the furthest point. OpenGL takes it from there and puts it on the screen and into the z-buffer.

 * Sources:

 * https://msdn.microsoft.com/en-us/library/windows/desktop/dd373965(v=vs.85).aspx
 * https://unspecified.wordpress.com/2012/06/21/calculating-the-gluperspective-matrix-and-other-opengl-matrix-maths/

================================================================================================================================================

	t_mat4					m4_perspective(float vertical_field_of_view_in_deg, float aspect_ratio, float near_view_distance,
											float far_view_distance);

 - Creates a perspective projection matrix for a camera.
 
 - The camera is at the origin and looks in the direction of the negative Z axis.
 - `near_view_distance` and `far_view_distance` have to be positive and > 0.
 - They are distances from the camera eye, not values on an axis.
 - `near_view_distance` can be small but not 0. 0 breaks the projection and everything
   ends up at the max value (far end) of the z-buffer. Making the z-buffer useless.

 * Sources:

 * https://unspecified.wordpress.com/2012/06/21/calculating-the-gluperspective-matrix-and-other-opengl-matrix-maths/

 ===============================================================================================================================================

	t_mat4					m4_look_at(t_vec3 from, t_vec3 to, t_vec3 up)

 - Builds a transformation matrix for a camera that looks from `from` towards `to`. 
 - `up` defines the direction that's upwards for the camera. All three vectors are given in world space and `up` doesn't need to be normalized.

 * Sources: Pen and Paper (Derived).
 
 * Implementation details:

 - x, y and z are the right-handed base vectors of the cameras subspace.
 - x has to be normalized because the cross product only produces a normalized output vector
   if both input vectors are orthogonal to each other. And `up` probably isn't orthogonal to z.
 - These vectors are then used to build a 3x3 rotation matrix. This matrix rotates a vector by
   the same amount the camera is rotated. But instead we need to rotate all incoming vertices backwards
   by that amount. That's what a camera matrix is for: To move the world so that the camera is in the origin.
 - So we take the inverse of that rotation matrix and in case of an rotation matrix this is just the transposed matrix.
 - That's why the 3x3 part of the matrix are the x, y and z vectors but written horizontally instead of vertically.
 - The translation is derived by creating a translation matrix to move the world into the origin (thats translate by minus `from`).
 - The complete lookat matrix is then this translation followed by the rotation.
 - Written as matrix multiplication:

 *   lookat = rotation * translation

 - Since we're right-handed this equals to first doing the translation and after that doing the rotation.
 - During that multiplication the rotation 3x3 part doesn't change but the translation vector is multiplied
   with each rotation axis.
 - The dot product is just a more compact way to write the actual multiplications.

================================================================================================================================================

	t_mat4					m4_invert_affine(t_mat4 matrix)

 - Inverts an affine transformation matrix. That are translation, scaling, mirroring, reflection,
   rotation and shearing matrices or any combination of them.

 * Implementation details:

 - Invert the 3x3 part of the 4x4 matrix to handle rotation, scaling, etc. correctly (see source).
 - Invert the translation part of the 4x4 matrix by multiplying it with the inverted rotation matrix and negating it.
 - When a 3D point is multiplied with a transformation matrix it is first rotated and then translated. 
 - The inverted transformation matrix is the inverse translation followed by the inverse rotation. Written as a matrix
   multiplication (remember, the effect applies right to left):

 *   inv(matrix) = inv(rotation) * inv(translation)

 - The inverse translation is a translation into the opposite direction, just the negative translation.
 - The rotation part isn't changed by that multiplication but the translation part is multiplied by
   the inverse rotation matrix. 
 - It's the same situation as with `m4_look_at()`. But since we don't store the rotation matrix as
   3D vectors we can't use the dot product and have to write the matrix multiplication operations by hand.

 * Sources for 3x3 matrix inversion:

 * https://www.khanacademy.org/math/precalculus/precalc-matrices/determinants-and-inverses-of-large-matrices/v/inverting-3x3-part-2-determinant-and-adjugate-of-a-matrix

================================================================================================================================================

	t_vec3					m4_mul_pos(t_mat4 matrix, t_vec3 position)

 - Multiplies a 4x4 matrix with a 3D vector representing a point in 3D space. 
 - Before the matrix multiplication the vector is first expanded to a 4D vector (x, y, z, 1).
 - After the multiplication the vector is reduced to 3D again by dividing through the 4th component (if it's not 0 or 1).

================================================================================================================================================

	t_vec3					m4_mul_dir(t_mat4 matrix, t_vec3 direction)

 - Multiplies a 4x4 matrix with a 3D vector representing a direction in 3D space.
 - Before the matrix multiplication the vector is first expanded to a 4D vector (x, y, z, 0).
 - For directions the 4th component is set to 0 because directions are only rotated, not translated.
 - After the multiplication the vector is reduced to 3D again by dividing
   through the 4th component (if it's not 0 or 1).
 - This is necessary because the matrix might contains something other than (0, 0, 0, 1) in the
   bottom row which might set w to something other than 0 or 1.

 ===============================================================================================================================================